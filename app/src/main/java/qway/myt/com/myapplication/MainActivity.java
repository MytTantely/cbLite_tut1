package qway.myt.com.myapplication;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.couchbase.lite.BasicAuthenticator;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Document;
import com.couchbase.lite.Endpoint;
import com.couchbase.lite.Expression;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorChange;
import com.couchbase.lite.ReplicatorChangeListener;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.URLEndpoint;

import java.net.URI;
import java.net.URISyntaxException;

public class MainActivity extends AppCompatActivity {

    private static final String TAG = "MainActivity";
    private Button mButtonChangeText;
    private TextView mTextViewHello;
    private static int inc = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTextViewHello = findViewById(R.id.textView);

        mButtonChangeText = findViewById(R.id.button);
        mButtonChangeText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                ++inc;
                mTextViewHello.setText("" + inc);
            }
        });
    }

    @Override
    protected void onStart() {

        super.onStart();
        try {

// Get the database (and create it if it doesnâ€™t exist).
            DatabaseConfiguration config = new DatabaseConfiguration(getApplicationContext());
            Database database = new Database("mydb", config);

// Create a new document (i.e. a record) in the database.
            MutableDocument mutableDoc = new MutableDocument()
                    .setFloat("version", 2.0F)
                    .setString("type", "SDK");

// Save it to the database.
            database.save(mutableDoc);

// Update a document.
            mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
            mutableDoc.setString("language", "Java");
            database.save(mutableDoc);
            Document document = database.getDocument(mutableDoc.getId());
// Log the document ID (generated by the database) and properties
            Log.i(TAG, "Document ID :: " + document.getId());
            Log.i(TAG, "Learning " + document.getString("language"));

// Create a query to fetch documents of type SDK.
            Query query = QueryBuilder.select(SelectResult.all())
                    .from(DataSource.database(database))
                    .where(Expression.property("type").equalTo(Expression.string("SDK")));
            ResultSet result = query.execute();
            Log.i(TAG, "Number of rows ::  " + result.allResults().size());

// Create replicators to push and pull changes to and from the cloud.
            Endpoint targetEndpoint = new URLEndpoint(new URI("ws://localhost:4984/example_sg_db"));
            ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
            replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

// Add authentication.
            replConfig.setAuthenticator(new BasicAuthenticator("john", "pass"));

// Create replicator.
            Replicator replicator = new Replicator(replConfig);

// Listen to replicator change events.
            replicator.addChangeListener(new ReplicatorChangeListener() {
                @Override
                public void changed(ReplicatorChange change) {
                    if (change.getStatus().getError() != null)
                        Log.i(TAG, "Error code ::  " + change.getStatus().getError().getCode());
                }
            });

// Start replication.
            replicator.start();


        } catch (CouchbaseLiteException | URISyntaxException e) {
            e.printStackTrace();
        }


    }
}
